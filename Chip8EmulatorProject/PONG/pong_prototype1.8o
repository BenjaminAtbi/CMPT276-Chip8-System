#SPRITES
: edge 0xFF 0xFF
: left_paddle 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 
: right_paddle 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 
: ball 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
: zero 0xF0 0x90 0x90 0x90 0x90 0xF0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

#REGISTER MAP (mostly used to keep track of movement)
:alias lefty      vd #left paddle vertical
:alias leftx      ve #left paddle horizontal
:alias rightx     v6 #right paddle horizontal movement
:alias righty     v7 #right paddle vertical
:alias rightx     v6 #right paddle horizontal movement
:alias ball	  v5 #ball can move either up, angled down, or angled up
:alias ballx	  v4 #ball horizontal
:alias bally	  v3 #ball vertical

#constant state of the ball moving up, down, or straight
:const BALL_ST 1
:const BALL_UP 2
:const BALL_DN 3

###########################################
#
#  Movement (Paddle, ball)
#
###########################################

: move_left_paddle #player 1 paddle
    v1 := leftx
    v2 := lefty

    #movement
    v0 := 1 if v0 key then v2 += -1 #up
    v0 := 4 if v0 key then v2 +=  1 #down

    #update position
    i := left_paddle
    sprite leftx lefty 8
    leftx := v1
    lefty := v2
    i := left_paddle
    sprite leftx lefty 8
;

: move_right_paddle #player 2 paddle
    v1 := rightx
    v2 := righty

    #movement
    v0 := 3 if v0 key then v2 += -1 #up
    v0 := 6 if v0 key then v2 +=  1 #down

    #update position
    i := right_paddle
    sprite rightx righty 8
    rightx := v1
    righty := v2
    i := right_paddle
    sprite rightx righty 8
;

: right_paddle_ai #computer controlled paddle (using random movement)
;

: move_ball
    v1 := ballx
    v2 := bally

    v1 += 1

    if ball == BALL_UP then v2 += -1
    if ball == BALL_DN then v2 += 1

    #bounce off top and bottom
    if v2 == 1 then ball := BALL_DN
    if v2 == 30 then ball := BALL_UP

    #out of bounds check
    if v1 == 64 then ball := 0
    if v1 == 0 then ball := 0
    if ball == 0 then jump gameover

    i := ball
    sprite ballx bally 1
    ballx := v1
    bally := v2
    i := ball
    sprite ballx bally 1
;

: user_ball
    v0 := 8 if v0 key then ball := BALL_UP
    v0 := 0 if v0 key then ball := BALL_DN
    move_ball
;

###########################################
#
#  Score checking
#
###########################################

: score_tracker

;

###########################################
#
#  Main functions
#
###########################################

: gameover
    clear
	v0 := 32
	buzzer := v0
	delay  := v0
	loop
		v0 := delay
		if v0 != 0 then
	again
	jump main
;

: main
    #initialize coordinates
    leftx := 1
    lefty := 12

    rightx := 55
    righty := 12

    ballx := 31
    bally := 16
    ball := BALL_UP #ball starts off going horizontal

    #draw borders
    i  := edge
	v0 := 0
	v1 := 31
	loop
		sprite v0 v1 2
		v0 += 8
		if v0 != 64 then
	again

    #draw the scoreboard (put in function along with scoretracking later)
    i := zero
    v0 := 20
    v1 := 3
    sprite v0 v1 6
    v0 := 39
    v1 := 3
    sprite v0 v1 6

    #draw initial state of ball, left and right paddles
    i := ball
    sprite ballx bally 1
    i := left_paddle
    sprite leftx lefty 8
    i := right_paddle
    sprite rightx righty 8

    #main program loop
    loop
        move_left_paddle
        move_right_paddle
        user_ball
    again
;